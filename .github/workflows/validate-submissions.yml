name: Validate Student Submission Files

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-files:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          *.md

    - name: Validate file naming and structure
      run: |
        # 如果没有.md文件变更则跳过
        if [ -z "${{ steps.changed-files.outputs.all_changed_files }}" ]; then
          echo "No markdown files changed, skipping validation"
          exit 0
        fi

        # 创建Python验证脚本
        cat > validate_files.py << 'EOF'
import os
import re
import yaml
from datetime import datetime
import sys

def validate_filename(filename):
    """验证文件名是否符合学号规范"""
    # 提取纯文件名（不含路径和扩展名）
    basename = os.path.basename(filename)
    name_without_ext = os.path.splitext(basename)[0]
    
    # 检查是否为10位数字
    if not re.match(r'^\d{10}$', name_without_ext):
        return False, f"文件名 '{name_without_ext}' 不是10位数字"
    
    # 检查是否以2025413开头
    if not name_without_ext.startswith('2025413'):
        return False, f"文件名 '{name_without_ext}' 不以2025413开头"
    
    return True, "文件名验证通过"

def validate_frontmatter(filepath):
    """验证YAML Front Matter格式"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 检查Front Matter分隔符
        if not content.startswith('---'):
            return False, "文件开头没有YAML Front Matter分隔符"
        
        # 提取Front Matter内容
        parts = content.split('---', 2)
        if len(parts) < 3:
            return False, "YAML Front Matter格式不完整"
        
        frontmatter_content = parts[1].strip()
        
        # 解析YAML
        try:
            metadata = yaml.safe_load(frontmatter_content)
        except yaml.YAMLError as e:
            return False, f"YAML解析错误: {e}"
        
        # 检查必需字段
        required_fields = ['title', 'date', 'tags', 'copyright_author']
        for field in required_fields:
            if field not in metadata:
                return False, f"缺少必需字段: {field}"
        
        # 验证date格式
        try:
            datetime.strptime(metadata['date'], '%Y-%m-%d %H:%M:%S')
        except ValueError:
            return False, "date字段格式不正确，应为: YYYY-MM-DD HH:MM:SS"
        
        # 验证tags格式
        if not isinstance(metadata['tags'], str):
            return False, "tags字段应为字符串"
        
        # 验证copyright_author格式
        if not isinstance(metadata['copyright_author'], str) or not metadata['copyright_author'].strip():
            return False, "copyright_author字段应为非空字符串"
        
        return True, "Front Matter验证通过"
        
    except Exception as e:
        return False, f"读取文件时出错: {e}"

def main():
    """主验证函数"""
    changed_files = os.getenv('CHANGED_FILES', '')
    if not changed_files:
        print("没有需要验证的文件")
        return 0
    
    files = changed_files.split(' ')
    all_valid = True
    
    for filepath in files:
        if not filepath.endswith('.md'):
            continue
            
        print(f"验证文件: {filepath}")
        
        # 验证文件名
        filename_valid, filename_msg = validate_filename(filepath)
        if not filename_valid:
            print(f"❌ 文件名验证失败: {filename_msg}")
            all_valid = False
            continue
        
        # 验证Front Matter
        frontmatter_valid, frontmatter_msg = validate_frontmatter(filepath)
        if not frontmatter_valid:
            print(f"❌ Front Matter验证失败: {frontmatter_msg}")
            all_valid = False
            continue
        
        print(f"✅ {filepath} 验证通过")
    
    if not all_valid:
        print("\\n部分文件验证失败，请检查上述错误信息")
        return 1
    
    print("所有文件验证通过！")
    return 0

if __name__ == "__main__":
    sys.exit(main())
EOF

        # 设置环境变量并运行验证
        echo "CHANGED_FILES=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_ENV
        
        # 运行Python验证脚本
        python validate_files.py
      shell: bash

    - name: Create validation report
      if: always()
      run: |
        echo "## 文件规范性检查报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **验证项目**: 学号文件命名规范" >> $GITHUB_STEP_SUMMARY  
        echo "✅ **验证项目**: YAML Front Matter格式" >> $GITHUB_STEP_SUMMARY
        echo "✅ **验证项目**: 必需字段检查" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**验证时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "详细验证结果见上述步骤输出。" >> $GITHUB_STEP_SUMMARY
